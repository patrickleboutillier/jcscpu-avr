---

header: |
  struct jALU { jALU(input wire bas[8], input wire bbs[8], input wire wci, input wire bops[3], 
    output wire bcs[8], output wire wco, output wire weqo, output wire walo, output wire wz) ; } ;

source: |
  jALU::jALU(input wire bas[8], input wire bbs[8], input wire wci, input wire bops[3], 
  	output wire bcs[8], output wire wco, output wire weqo, output wire walo, output wire wz){

  	// Build the ALU circuit
  	wire *bdec = bus(8).wires() ;
  	jdecoderN dec(3, 8, bops, bdec) ;
  
  	busor bcsor(8, bcs) ;
  
  	wire *bxor = bus(8).wires() ;  
  	jxorer xorer(bas, bbs, bxor, weqo, walo) ;
  	jenabler enaxor(bxor, bdec[1], bcsor.new_input()) ;
  
  	wire *bor = bus(8).wires() ;
  	jorer orer(bas, bbs, bor) ;
  	jenabler enaor(bor, bdec[2], bcsor.new_input()) ;
  
  	wire *band = bus(8).wires() ;  
  	jandder andder(bas, bbs, band) ;
  	jenabler enaand(band, bdec[3], bcsor.new_input()) ;
  
  	wire *bnot = bus(8).wires() ;
  	jnotter n(bas, bnot)  ;
  	jenabler enanot(bnot, bdec[4], bcsor.new_input()) ;  
  
  	wire wcotmp[3] ; 
  	jorN jorwco(3, wcotmp, wco) ;
  
  	wire woshl ;
  	wire *bshl = bus(8).wires() ;
  	jshiftl shitfl(bas, wci, bshl, woshl) ;
  	jand sle(woshl, bdec[5], wcotmp[0]) ;
  	jenabler enashl(bshl, bdec[5], bcsor.new_input()) ;
  
  	wire woshr ;
  	wire *bshr = bus(8).wires() ;
  	jshiftr shiftr(bas, wci, bshr, woshr) ;
  	jand sre(woshr, bdec[6], wcotmp[1]) ;
  	jenabler enashr(bshr, bdec[6], bcsor.new_input()) ;
  
  	wire aco ;
  	wire acs[8] ;
  	jadder adder(bas, bbs, wci, acs, aco) ;
  	jand adde(aco, bdec[7], wcotmp[2]) ;
  	jenabler enaadd(acs, bdec[7], bcsor.new_input()) ;
  
  	jzero z(bcs, wz) ;
  }

test: |
  wire *bas = bus(8, "bas").wires() ;
  wire *bbs = bus(8, "bbs").wires() ;
  wire *bops = bus(3, "bops").wires() ;
  wire *bcs = bus(8, "bcs").wires() ;
  wire wci("wci"), wco("wco"), weqo("weqo"), walo("walo"), wz("wz") ;
  jALU x(bas, bbs, wci, bops, bcs, wco, weqo, walo, wz) ;

rank: 7

testperl: |
  use strict ;
  require test ;
  
  test('jALU',
    [bus('bas'), bus('bbs'), qw(wci), bus('bops', 3)],
    [bus('bcs'), qw(wco weqo walo wz)]) ;

testdata: |
  # bas, bbs, wci, ops, bcs, wco, weqo, walo, wz 
  00000000_00000000_0_000=00000000_0101
  00000001_00000000_0_000=00000001_0010
  00000001_00000000_0_001=00000000_1011
  #00000001_00000000_0_010=00000010_0010
  00000001_00000000_0_011=11111110_0010
  00000001_00000000_0_100=00000000_0011
  00000001_00000000_0_101=00000001_0010
  00000001_00000000_0_110=00000001_0010
  00000001_00000000_0_111=00000000_0011
  00000101_00001001_0_111=00000000_0001
